THEORY SetAsList

IMPORT-THEORY Equality
IMPORT-HASKELL List
IMPORT-THEORY List
IMPORT-HASKELL SetAsList

THEOREM insIntoSingle

    length (ins 3 [5]) == 2

    STRATEGY ReduceLHS

        length (ins 3 [5])
        = DEF ins.2
        length (
          case "guarded-if" of 
            _ | (3 < 5)  -> (3 : (5 : [])) 
              | (3 > 5)  -> (5 : ins (3) ([])) 
              | (3 == 5) -> (5 : []) )
        = SIMP
        length (
          case "guarded-if" of 
            _ | True  -> (3 : (5 : [])) 
              | False  -> (5 : ins (3) ([])) 
              | False -> (5 : []) )
        = GRDIF 1 
        length ([3,5])
        = DEF length.2
        1 + (length [5])
        = DEF length.2
        1 + (1 + (length []))
        = DEF length.1
        1 + (1 + 0)
        = SIMP
        2

    END ReduceLHS

QED insIntoSingle




THEOREM lenSingle

    length (ins 3 []) == 1

    STRATEGY ReduceLHS

        length (ins 3 [])
        = DEF ins.1
        length (3:[])
        = DEF length.2
        1 + (length [])
        = DEF length.1
        1 + 0
        = SIMP
        1

    END ReduceLHS

QED lenSingle




THEOREM lenDouble

    length (ins 7 [5]) == 2

    STRATEGY ReduceLHS

        length (ins 7 [5])
        = DEF ins.2
        length (
          case "guarded-if" of 
            _ | (7 < 5)  -> (7 : (5 : [])) 
              | (7 > 5)  -> (5 : ins (7) ([])) 
              | (7 == 5) -> (5 : []) )
        = SIMP
        length (
          case "guarded-if" of 
            _ | False  -> (7 : (5 : [])) 
              | True  -> (5 : ins (7) ([])) 
              | False -> (5 : []) )
        = GRDIF 2
        length (5 : ins (7) ([])) 
        = DEF ins.1
        length (5 : [7]) 
        = DEF length.2
        1 + (length [7])
        = DEF length.2
        1 + (1 + (length []))
        = DEF length.1
        1 + (1 + 0)
        = SIMP
        2

    END ReduceLHS

QED lenDouble


CASE-SCHEME TotalOrder
    CASE 1  (x < y)
    CASE 2  (x == y)
    CASE 3  (x > y)
    EXHAUSTIVE (x<y) || (x==y) || (x>y)
    EXCLUSIVE 1 2  not((x<y) && (x==y))
    EXCLUSIVE 1 3  not((x<y) && (x>y))
    EXCLUSIVE 2 3  not((x==y) && (x>y))


THEOREM mbr_after_ins

    mbr x (ins x ys)

    STRATEGY Induction ys :: List

        BASE [] 
            mbr x (ins x [])

            STRATEGY ReduceAll

              mbr x (ins x [])
            = DEF ins.1
              mbr x [x]
            = DEF mbr.2
              case "guarded-if" of
                _ | (x < x) -> False
                  | (x > x) -> mbr x []
                  | (x == x) -> True
            = LAW eq_refl @ guarded-if 3
              case "guarded-if" of
                _ | (x < x) -> False
                  | (x > x) -> mbr x []
                  | True -> True
            = GRDIF 3
              True

            END ReduceAll

        END BASE

        STEP (y:ys)

            ASSUME 
            mbr x (ins x ys)

            SHOW 
            mbr x (ins x (y:ys))

            STRATEGY CaseSplit TotalOrder

                CASE 1  (x < y) 

                    SHOW  
                        mbr x (ins x (y:ys))

                    STRATEGY ReduceAll

                        mbr x (ins x (y:ys))

                    END ReduceAll

                END CASE 1

                CASE 2  (x == y) 

                    SHOW  
                        mbr x (ins x (y:ys))

                    STRATEGY ReduceAll

                        mbr x (ins x (y:ys))

                    END ReduceAll

                END CASE 2

                CASE 3 (x > y) 

                    SHOW  
                        mbr x (ins x (y:ys))

                    STRATEGY ReduceAll

                        mbr x (ins x (y:ys))
                      = DEF ins.2
                        mbr x ( case "guarded-if" of 
                                  _ | (x < y)  -> (x : (y : ys)) 
                                    | (x > y)  -> (y : ins x ys) 
                                    | (x == y) -> (y : ys) )
                      = CASEP TotalOrder 3 @ guarded-if 2
                        mbr x ( case "guarded-if" of 
                                  _ | (x < y)  -> x : y : ys
                                    | True     -> y : ins x ys
                                    | (x == y) -> y : ys )
                      = GRDIF 2
                        mbr x (y : ins (x) (ys))
                      = DEF mbr.2
                        case "guarded-if" of
                          _ | x < y   ->  False
                            | x > y   ->  mbr x (ins x ys)
                            | x == y  ->  True
                      = CASEP TotalOrder 3 @ guarded-if 2
                        case "guarded-if" of
                          _ | x < y   ->  False
                            | True   ->  mbr x (ins x ys)
                            | x == y  ->  True
                      = GRDIF 2
                        mbr x (ins x ys)
                      = INDHYP 
                        True


                    END ReduceAll

                END CASE 3

            END CaseSplit

        END STEP

    END Induction
    
QED mbr_after_ins

