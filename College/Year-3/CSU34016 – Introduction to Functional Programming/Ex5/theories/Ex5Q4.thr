THEORY Ex5Q4
IMPORT-THEORY Equality
IMPORT-THEORY Boolean
IMPORT-THEORY Arithmetic
IMPORT-THEORY List
IMPORT-HASKELL List
IMPORT-HASKELL Ex5

THEOREM ex5q4

   casef (x+1) > casef x

            STRATEGY CaseSplit Plus1Order

                CASE 1  (x < 4) 

                    SHOW
                        casef (x+1) > casef x

                    STRATEGY ReduceAll

                      casef (x+1) > casef x
                      = DEF casef.1 @ casef 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = LAW lt_p1_to_m1 l2r @ < 1
                        (case "guarded-if" of
                         _ | (x < 5 - 1) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = SIMP 
                        (case "guarded-if" of
                         _ | (x < 4) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x 
                      = CASEP PluslOrder 1 @ < 1
                        (case "guarded-if" of
                         _ | True -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = GRDIF 1
                        2*(x+1) > casef x 
                      = DEF casef.1 @ casef 1
                         2*(x+1) > (case "guarded-if" of
                         _ | (x < 5) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = LAW lt_widen l2r @ < 1
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < (5-1))) -> 2*x
                           | (x >= 5) -> 2*x-1) 
                      = SIMP
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < 4)) -> 2*x
                           | (x >= 5) -> 2*x-1) 
                      = CASEP PluslOrder 1 @ < 2 
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || True) -> 2*x
                           | (x >= 5) -> 2*x-1)  
                      =  LAW or_right_zero l2r @ || 1
                        2*(x+1) > (case "guarded-if" of
                         _ | True -> 2*x
                           | (x >= 5) -> 2*x-1) 
                      = GRDIF 1
                        2*(x+1) > 2*x 
                      = LAW mul_add_left_distr l2r @ * 1
                        2*x + 2*1 > 2*x 
                      = SIMP @ * 2
                        2*x + 2 > 2*x
                      = LAW nat_add_order_2 
                        True 

                    END ReduceAll

                END CASE 1

                CASE 2  (x == 4)

                    SHOW
                        casef (x+1) > casef x

                    STRATEGY ReduceAll

                      casef (x+1) > casef x
                      = DEF casef.1 @ casef 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = LAW ge_p1_to_m1 l2r @ >= 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = SIMP
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x >= 5) -> 2*(x+1)-1) > casef x
                      = LAW gt_def l2r @ > 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) > casef x
                      = CASEP PluslOrder 1 @ ==  
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) == casef x
                      = LAW or_right_zero l2r @ || 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) == casef x
                      = GRDIF 2
                        2*(x+1)-1 == casef x        
                      = DEF casef.1 @ casef 1
                        2*(x+1) > (case "guarded-if" of
                         _ | (x < 5) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = LAW lt_widen l2r @ < 1
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < (5-1))) -> 2*x
                           | (x >= 5) -> 2*x-1) 
                      = SIMP
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < 4)) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = CASEP PluslOrder 1 @ < 2
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || True) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = LAW or_right_zero l2r @ || 1
                        2*(x+1) > (case "guarded-if" of
                         _ | True -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = GRDIF 1
                        2*(x+1) > 2*x
                      = LAW mul_add_left_distr l2r @ * 1
                        2*x + 2*1 > 2*x
                      = SIMP @ * 2
                        2*x + 2 > 2*x
                      = LAW nat_add_order_2
                        True
                    END ReduceAll
                END CASE 2

                CASE 3  (x == 5)

                    SHOW
                        casef (x+1) > casef x

                    STRATEGY ReduceAll

                      casef (x+1) > casef x
                      = DEF casef.1 @ casef 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = LAW ge_p1_to_m1 l2r @ >= 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = SIMP
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x >= 5) -> 2*(x+1)-1) > casef x
                      = LAW gt_def l2r @ > 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) > casef x
                      = CASEP PluslOrder 1 @ ==  
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) == casef x
                      = LAW or_right_zero l2r @ || 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) == casef x
                      = GRDIF 2
                        2*(x+1)-1 == casef x        
                      = DEF casef.1 @ casef 1
                        2*(x+1) > (case "guarded-if" of
                         _ | (x < 5) -> 2*x
                           | (x >= 5) -> 2*x-1) 
                      = LAW lt_widen l2r @ < 1
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < (5-1))) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = SIMP
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < 4)) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = CASEP PluslOrder 1 @ < 2
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || True) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = LAW or_right_zero l2r @ || 1
                        2*(x+1) > (case "guarded-if" of
                         _ | True -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = GRDIF 1
                        2*(x+1) > 2*x
                      = LAW mul_add_left_distr l2r @ * 1
                        2*x + 2*1 > 2*x
                      = SIMP @ * 2
                        2*x + 2 > 2*x
                      = LAW nat_add_order_2
                        True

                    END ReduceAll
                END CASE 3

                CASE 4  (x > 5)

                    SHOW
                        casef (x+1) > casef x

                    STRATEGY ReduceAll

                      casef (x+1) > casef x
                      = DEF casef.1 @ casef 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = LAW ge_p1_to_m1 l2r @ >= 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x + 1 >= 5) -> 2*(x+1)-1) > casef x
                      = SIMP
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | (x >= 5) -> 2*(x+1)-1) > casef x
                      = LAW gt_def l2r @ > 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) > casef x
                      = CASEP PluslOrder 1 @ ==  
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) == casef x
                      = LAW or_right_zero l2r @ || 1
                        (case "guarded-if" of
                         _ | (x + 1 < 5) -> 2*(x+1)
                           | True -> 2*(x+1)-1) == casef x
                      = GRDIF 2
                        2*(x+1)-1 == casef x        
                      = DEF casef.1 @ casef 1
                        2*(x+1) > (case "guarded-if" of
                         _ | (x < 5) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = LAW lt_widen l2r @ < 1
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < (5-1))) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = SIMP
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || (x < 4)) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = CASEP PluslOrder 1 @ < 2
                        2*(x+1) > (case "guarded-if" of
                         _ | ((x < 5) || True) -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = LAW or_right_zero l2r @ || 1
                        2*(x+1) > (case "guarded-if" of
                         _ | True -> 2*x
                           | (x >= 5) -> 2*x-1)
                      = GRDIF 1 
                        2*(x+1) > 2*x
                      = LAW mul_add_left_distr l2r @ * 1
                        2*x + 2*1 > 2*x
                      = SIMP @ * 2
                        2*x + 2 > 2*x
                      = LAW nat_add_order_2
                        True
                        END ReduceAll
                END CASE 4

                      


                  

END CaseSplit

QED ex5q4




CASE-SCHEME Plus1Order
CASE 1  (x <  4)
CASE 2  (x == 4)
CASE 3  (x == 5)
CASE 4  (x >  5)
EXHAUSTIVE (x <  4) || (x == 4) || (x == 5) || (x >  5)
EXCLUSIVE 1 2  not((x <  4) && (x == 4))
EXCLUSIVE 1 3  not((x <  4) && (x == 5))
EXCLUSIVE 1 4  not((x <  4) && (x >  5))
EXCLUSIVE 2 3  not((x == 4) && (x == 5))
EXCLUSIVE 2 4  not((x == 4) && (x >  5))
EXCLUSIVE 3 4  not((x == 5) && (x >  5))




CASE-SCHEME Plus1Order
CASE 1  (x <  4)
CASE 2  (x == 4)
CASE 3  (x == 5)
CASE 4  (x >  5)
EXHAUSTIVE (x <  4) || (x == 4) || (x == 5) || (x >  5)
EXCLUSIVE 1 2  not((x <  4) && (x == 4))
EXCLUSIVE 1 3  not((x <  4) && (x == 5))
EXCLUSIVE 1 4  not((x <  4) && (x >  5))
EXCLUSIVE 2 3  not((x == 4) && (x == 5))
EXCLUSIVE 2 4  not((x == 4) && (x >  5))
EXCLUSIVE 3 4  not((x == 5) && (x >  5))
